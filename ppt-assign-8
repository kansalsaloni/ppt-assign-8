Q1 Given two strings s1 and s2, return the lowest ASCII sum of deleted characters to make two strings equal.

#include <iostream>
#include <vector>

int minimumDeleteSum(const std::string& s1, const std::string& s2) {
    int m = s1.length();
    int n = s2.length();

    // Create a 2D vector to store the minimum ASCII sum of deleted characters
    std::vector<std::vector<int>> dp(m + 1, std::vector<int>(n + 1, 0));

    // Initialize the first row and column of dp
    for (int i = 1; i <= m; i++) {
        dp[i][0] = dp[i - 1][0] + s1[i - 1];
    }

    for (int j = 1; j <= n; j++) {
        dp[0][j] = dp[0][j - 1] + s2[j - 1];
    }

    // Fill the dp matrix
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (s1[i - 1] == s2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1];
            } else {
                dp[i][j] = std::min(dp[i - 1][j] + s1[i - 1], dp[i][j - 1] + s2[j - 1]);
            }
        }
    }

    // Return the lowest ASCII sum of deleted characters
    return dp[m][n];
}

int main() {
    std::string s1, s2;
    std::cout << "Enter string s1: ";
    std::cin >> s1;
    std::cout << "Enter string s2: ";
    std::cin >> s2;

    int result = minimumDeleteSum(s1, s2);
    std::cout << "Lowest ASCII sum of deleted characters: " << result << std::endl;

    return 0;
}

  
Input:** s1 = "sea", s2 = "eat"
Output:** 231
#################################################################################################################
Q2 Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.

#include <iostream>
#include <stack>

bool isValidString(const std::string& s) {
    std::stack<int> leftParens;
    std::stack<int> stars;

    for (int i = 0; i < s.length(); i++) {
        if (s[i] == '(') {
            leftParens.push(i);
        } else if (s[i] == '*') {
            stars.push(i);
        } else {
            if (!leftParens.empty()) {
                leftParens.pop();
            } else if (!stars.empty()) {
                stars.pop();
            } else {
                return false;
            }
        }
    }

    while (!leftParens.empty() && !stars.empty()) {
        if (leftParens.top() > stars.top()) {
            return false;
        }
        leftParens.pop();
        stars.pop();
    }

    return leftParens.empty();
}

int main() {
    std::string s;
    std::cout << "Enter string s: ";
    std::cin >> s;

    bool result = isValidString(s);
    std::cout << "Is the string valid? " << (result ? "true" : "false") << std::endl;

    return 0;
}


Input: s = "()"
Output: true
#################################################################################################################
Q3 Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.

#include <iostream>
#include <vector>
#include <algorithm>

int minDistance(const std::string& word1, const std::string& word2) {
    int m = word1.length();
    int n = word2.length();

    // Create a 2D vector to store the lengths of the longest common subsequences
    std::vector<std::vector<int>> dp(m + 1, std::vector<int>(n + 1, 0));

    // Fill in the dp table
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (word1[i - 1] == word2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }

    int lcsLength = dp[m][n];
    int totalLength = m + n;

    return totalLength - 2 * lcsLength;
}

int main() {
    std::string word1, word2;
    std::cout << "Enter word1: ";
    std::cin >> word1;
    std::cout << "Enter word2: ";
    std::cin >> word2;

    int steps = minDistance(word1, word2);
    std::cout << "Minimum number of steps: " << steps << std::endl;

    return 0;
}


Input:** word1 = "sea", word2 = "eat"
Output:** 2
#################################################################################################################
Q4 You need to construct a binary tree from a string consisting of parenthesis and integers.
The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.
You always start to construct the **left** child node of the parent first if it exists.

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


def str2tree(s):
    if not s:
        return None

    # Find the index of the first parenthesis
    i = s.find('(')

    if i == -1:
        # If there are no parentheses, the whole string is the root's value
        return TreeNode(int(s))

    # Create the root node with the value before the parenthesis
    root = TreeNode(int(s[:i]))

    # Count the number of opening and closing parentheses
    count = 0
    j = i

    while j < len(s):
        if s[j] == '(':
            count += 1
        elif s[j] == ')':
            count -= 1

        if count == 0:
            break

        j += 1

    # Construct the left subtree recursively
    root.left = str2tree(s[i + 1: j])

    if j + 1 < len(s):
        # Construct the right subtree recursively
        root.right = str2tree(s[j + 2: -1])

    return root


# Example usage:
s = "4(2(3)(1))(6(5))"
root = str2tree(s)


Input:** s = "4(2(3)(1))(6(5))"
Output:** [4,2,6,3,1,5]
#################################################################################################################
Q5 Given an array of characters chars, compress it using the following algorithm:
Begin with an empty string s. For each group of **consecutive repeating characters** in chars:

#include <string>
#include <vector>

int compress(std::vector<char>& chars) {
    int writeIdx = 0;
    char currChar = chars[0];
    int count = 1;

    for (int i = 1; i < chars.size(); ++i) {
        if (chars[i] == currChar) {
            count++;
        } else {
            chars[writeIdx] = currChar;
            writeIdx++;

            if (count > 1) {
                std::string countStr = std::to_string(count);
                for (char c : countStr) {
                    chars[writeIdx] = c;
                    writeIdx++;
                }
            }

            currChar = chars[i];
            count = 1;
        }
    }

    chars[writeIdx] = currChar;
    writeIdx++;

    if (count > 1) {
        std::string countStr = std::to_string(count);
        for (char c : countStr) {
            chars[writeIdx] = c;
            writeIdx++;
        }
    }

    return writeIdx;
}


Input:** chars = ["a","a","b","b","c","c","c"]
Output:** Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]
#################################################################################################################
Q6 Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

#include <vector>
#include <string>
#include <unordered_map>

std::vector<int> findAnagrams(std::string s, std::string p) {
    std::vector<int> result;
    if (s.length() < p.length()) {
        return result;
    }

    std::unordered_map<char, int> pCount;
    std::unordered_map<char, int> windowCount;

    for (char c : p) {
        pCount[c]++;
    }

    int left = 0;
    int right = 0;
    int count = pCount.size();

    while (right < s.length()) {
        char c = s[right];
        if (pCount.find(c) != pCount.end()) {
            windowCount[c]++;
            if (windowCount[c] == pCount[c]) {
                count--;
            }
        }
        right++;

        while (count == 0) {
            if (right - left == p.length()) {
                result.push_back(left);
            }
            char leftChar = s[left];
            if (pCount.find(leftChar) != pCount.end()) {
                windowCount[leftChar]--;
                if (windowCount[leftChar] < pCount[leftChar]) {
                    count++;
                }
            }
            left++;
        }
    }

    return result;
}


Input:** s = "cbaebabacd", p = "abc"
Output:** [0,6]
#################################################################################################################
Q7 Given an encoded string, return its decoded string.

#include <string>
#include <stack>

std::string decodeString(std::string s) {
    std::stack<int> countStack;
    std::stack<std::string> stringStack;
    std::string currString;
    int currCount = 0;

    for (char c : s) {
        if (std::isdigit(c)) {
            currCount = currCount * 10 + (c - '0');
        } else if (c == '[') {
            countStack.push(currCount);
            stringStack.push(currString);
            currCount = 0;
            currString = "";
        } else if (c == ']') {
            int repeatCount = countStack.top();
            countStack.pop();
            std::string decodedString = stringStack.top();
            stringStack.pop();

            for (int i = 0; i < repeatCount; i++) {
                decodedString += currString;
            }

            currString = decodedString;
        } else {
            currString += c;
        }
    }

    return currString;
}


Input:** s = "3[a]2[bc]"
Output:** "aaabcbc"
#################################################################################################################
Q8 Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.

#include <string>
#include <unordered_set>

bool buddyStrings(string s, string goal) {
    if (s.length() != goal.length() || s.empty())
        return false;

    if (s == goal) {
        // Check if there are any duplicate characters in s
        unordered_set<char> uniqueChars;
        for (char c : s) {
            if (uniqueChars.count(c) > 0)
                return true;
            uniqueChars.insert(c);
        }
        return false;
    }

    int first = -1, second = -1;
    for (int i = 0; i < s.length(); i++) {
        if (s[i] != goal[i]) {
            if (first == -1)
                first = i;
            else if (second == -1)
                second = i;
            else
                return false;
        }
    }

    return (second != -1 && s[first] == goal[second] && s[second] == goal[first]);
}

Input:** s = "ab", goal = "ba"
Output:** true
